{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: (username, email, password) => api.post('/auth/register', {\n    username,\n    email,\n    password\n  }),\n  login: (email, password) => api.post('/auth/login', {\n    email,\n    password\n  })\n};\n\n// User API\nexport const userAPI = {\n  getCurrentUser: () => api.get('/users/me'),\n  getUsers: () => api.get('/users'),\n  updateUserStatus: isOnline => api.put('/users/status', {\n    isOnline\n  })\n};\n\n// Conversation API\nexport const conversationAPI = {\n  getConversations: () => api.get('/conversations'),\n  createConversation: participantId => api.post('/conversations', {\n    participantId\n  }),\n  getConversationById: id => api.get(`/conversations/${id}`)\n};\n\n// Message API\nexport const messageAPI = {\n  getMessages: conversationId => api.get(`/messages/conversation/${conversationId}`),\n  markMessageAsRead: messageId => api.put(`/messages/read/${messageId}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","withCredentials","interceptors","request","use","config","token","sessionStorage","getItem","headers","Authorization","authAPI","register","username","email","password","post","login","userAPI","getCurrentUser","get","getUsers","updateUserStatus","isOnline","put","conversationAPI","getConversations","createConversation","participantId","getConversationById","id","messageAPI","getMessages","conversationId","markMessageAsRead","messageId"],"sources":["c:/Users/satya/OneDrive/Desktop/chatapp/chatapp-web/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  withCredentials: true,\r\n});\r\n\r\n// Add token to requests if available\r\napi.interceptors.request.use((config) => {\r\n  const token = sessionStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (username, email, password) => \r\n    api.post('/auth/register', { username, email, password }),\r\n  \r\n  login: (email, password) => \r\n    api.post('/auth/login', { email, password }),\r\n};\r\n\r\n// User API\r\nexport const userAPI = {\r\n  getCurrentUser: () => api.get('/users/me'),\r\n  getUsers: () => api.get('/users'),\r\n  updateUserStatus: (isOnline) => api.put('/users/status', { isOnline }),\r\n};\r\n\r\n// Conversation API\r\nexport const conversationAPI = {\r\n  getConversations: () => api.get('/conversations'),\r\n  createConversation: (participantId) => api.post('/conversations', { participantId }),\r\n  getConversationById: (id) => api.get(`/conversations/${id}`),\r\n};\r\n\r\n// Message API\r\nexport const messageAPI = {\r\n  getMessages: (conversationId) => api.get(`/messages/conversation/${conversationId}`),\r\n  markMessageAsRead: (messageId) => api.put(`/messages/read/${messageId}`),\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMM,OAAO,GAAG;EACrBC,QAAQ,EAAEA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAClCjB,GAAG,CAACkB,IAAI,CAAC,gBAAgB,EAAE;IAAEH,QAAQ;IAAEC,KAAK;IAAEC;EAAS,CAAC,CAAC;EAE3DE,KAAK,EAAEA,CAACH,KAAK,EAAEC,QAAQ,KACrBjB,GAAG,CAACkB,IAAI,CAAC,aAAa,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC;AAC/C,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAG;EACrBC,cAAc,EAAEA,CAAA,KAAMrB,GAAG,CAACsB,GAAG,CAAC,WAAW,CAAC;EAC1CC,QAAQ,EAAEA,CAAA,KAAMvB,GAAG,CAACsB,GAAG,CAAC,QAAQ,CAAC;EACjCE,gBAAgB,EAAGC,QAAQ,IAAKzB,GAAG,CAAC0B,GAAG,CAAC,eAAe,EAAE;IAAED;EAAS,CAAC;AACvE,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAG;EAC7BC,gBAAgB,EAAEA,CAAA,KAAM5B,GAAG,CAACsB,GAAG,CAAC,gBAAgB,CAAC;EACjDO,kBAAkB,EAAGC,aAAa,IAAK9B,GAAG,CAACkB,IAAI,CAAC,gBAAgB,EAAE;IAAEY;EAAc,CAAC,CAAC;EACpFC,mBAAmB,EAAGC,EAAE,IAAKhC,GAAG,CAACsB,GAAG,CAAC,kBAAkBU,EAAE,EAAE;AAC7D,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,WAAW,EAAGC,cAAc,IAAKnC,GAAG,CAACsB,GAAG,CAAC,0BAA0Ba,cAAc,EAAE,CAAC;EACpFC,iBAAiB,EAAGC,SAAS,IAAKrC,GAAG,CAAC0B,GAAG,CAAC,kBAAkBW,SAAS,EAAE;AACzE,CAAC;AAED,eAAerC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
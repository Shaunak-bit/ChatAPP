{"ast":null,"code":"import io from 'socket.io-client';\nconst SOCKET_URL = 'http://localhost:5000';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect(token) {\n    if (this.socket && this.socket.connected) {\n      // If already connected with same token, resolve immediately\n      if (this.socket.auth.token === token) {\n        return Promise.resolve();\n      }\n      // If connected with different token, disconnect first\n      this.disconnect();\n    }\n    return new Promise((resolve, reject) => {\n      this.socket = io(SOCKET_URL, {\n        auth: {\n          token\n        },\n        transports: ['websocket']\n      });\n      this.socket.on('connect', () => {\n        console.log('Socket connected');\n        this.emit('socket:connected');\n        resolve();\n      });\n      this.socket.on('disconnect', () => {\n        console.log('Socket disconnected');\n        this.emit('socket:disconnected');\n      });\n\n      // Handle incoming messages\n      this.socket.on('message:new', message => {\n        this.emit('message:new', message);\n      });\n\n      // Handle typing indicators\n      this.socket.on('typing:start', data => {\n        this.emit('typing:start', data);\n      });\n      this.socket.on('typing:stop', data => {\n        this.emit('typing:stop', data);\n      });\n\n      // Handle read receipts\n      this.socket.on('message:read', data => {\n        this.emit('message:read', data);\n      });\n\n      // Handle errors\n      this.socket.on('error', error => {\n        console.error('Socket error:', error);\n        this.emit('socket:error', error);\n      });\n    });\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n\n  // Message events\n  sendMessage(conversationId, text) {\n    if (!this.socket) return;\n    this.socket.emit('message:send', {\n      conversationId,\n      text\n    });\n  }\n\n  // Typing events\n  startTyping(conversationId) {\n    if (!this.socket) return;\n    this.socket.emit('typing:start', {\n      conversationId\n    });\n  }\n  stopTyping(conversationId) {\n    if (!this.socket) return;\n    this.socket.emit('typing:stop', {\n      conversationId\n    });\n  }\n\n  // Read receipts\n  markMessageAsRead(messageId) {\n    if (!this.socket) return;\n    this.socket.emit('message:read', {\n      messageId\n    });\n  }\n\n  // Conversation events\n  joinConversation(conversationId) {\n    if (!this.socket) return;\n    this.socket.emit('join-conversation', conversationId);\n  }\n  leaveConversation(conversationId) {\n    if (!this.socket) return;\n    this.socket.emit('leave-conversation', conversationId);\n  }\n\n  // Event handling\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    const listeners = this.listeners.get(event);\n    if (listeners) {\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    const listeners = this.listeners.get(event);\n    if (listeners) {\n      listeners.forEach(callback => callback(data));\n    }\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SOCKET_URL","SocketService","constructor","socket","listeners","Map","connect","token","connected","auth","Promise","resolve","disconnect","reject","transports","on","console","log","emit","message","data","error","isConnected","sendMessage","conversationId","text","startTyping","stopTyping","markMessageAsRead","messageId","joinConversation","leaveConversation","event","callback","has","set","get","push","off","index","indexOf","splice","forEach"],"sources":["c:/Users/satya/OneDrive/Desktop/chatapp/chatapp-web/src/services/socket.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nconst SOCKET_URL = 'http://localhost:5000';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect(token) {\r\n    if (this.socket && this.socket.connected) {\r\n      // If already connected with same token, resolve immediately\r\n      if (this.socket.auth.token === token) {\r\n        return Promise.resolve();\r\n      }\r\n      // If connected with different token, disconnect first\r\n      this.disconnect();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.socket = io(SOCKET_URL, {\r\n        auth: { token },\r\n        transports: ['websocket'],\r\n      });\r\n\r\n      this.socket.on('connect', () => {\r\n        console.log('Socket connected');\r\n        this.emit('socket:connected');\r\n        resolve();\r\n      });\r\n\r\n      this.socket.on('disconnect', () => {\r\n        console.log('Socket disconnected');\r\n        this.emit('socket:disconnected');\r\n      });\r\n\r\n      // Handle incoming messages\r\n      this.socket.on('message:new', (message) => {\r\n        this.emit('message:new', message);\r\n      });\r\n\r\n      // Handle typing indicators\r\n      this.socket.on('typing:start', (data) => {\r\n        this.emit('typing:start', data);\r\n      });\r\n\r\n      this.socket.on('typing:stop', (data) => {\r\n        this.emit('typing:stop', data);\r\n      });\r\n\r\n      // Handle read receipts\r\n      this.socket.on('message:read', (data) => {\r\n        this.emit('message:read', data);\r\n      });\r\n\r\n      // Handle errors\r\n      this.socket.on('error', (error) => {\r\n        console.error('Socket error:', error);\r\n        this.emit('socket:error', error);\r\n      });\r\n    });\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n  }\r\n\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n\r\n  // Message events\r\n  sendMessage(conversationId, text) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('message:send', { conversationId, text });\r\n  }\r\n\r\n  // Typing events\r\n  startTyping(conversationId) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('typing:start', { conversationId });\r\n  }\r\n\r\n  stopTyping(conversationId) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('typing:stop', { conversationId });\r\n  }\r\n\r\n  // Read receipts\r\n  markMessageAsRead(messageId) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('message:read', { messageId });\r\n  }\r\n\r\n  // Conversation events\r\n  joinConversation(conversationId) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('join-conversation', conversationId);\r\n  }\r\n\r\n  leaveConversation(conversationId) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('leave-conversation', conversationId);\r\n  }\r\n\r\n  // Event handling\r\n  on(event, callback) {\r\n    if (!this.listeners.has(event)) {\r\n      this.listeners.set(event, []);\r\n    }\r\n    this.listeners.get(event).push(callback);\r\n  }\r\n\r\n  off(event, callback) {\r\n    const listeners = this.listeners.get(event);\r\n    if (listeners) {\r\n      const index = listeners.indexOf(callback);\r\n      if (index > -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit(event, data) {\r\n    const listeners = this.listeners.get(event);\r\n    if (listeners) {\r\n      listeners.forEach(callback => callback(data));\r\n    }\r\n  }\r\n}\r\n\r\nexport default new SocketService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}